generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model card {
  card_id          Int           @id(map: "pk_card") @default(autoincrement())
  hash             String        @unique(map: "uk_card_hash") @db.VarChar(100)
  user_id          Int
  card_template_id Int
  from             String        @db.VarChar(50)
  to               String?       @db.VarChar(50)
  published_date   DateTime?
  deleted          String        @default("N") @db.VarChar(1)
  created_date     DateTime      @default(now())
  updated_date     DateTime      @default(now())
  card_template    card_template @relation(fields: [card_template_id], references: [card_template_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_card_card_template")
  user             user          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_card_user")
  message          message[]
}

model card_template {
  card_template_id Int       @id(map: "pk_card_template") @default(autoincrement())
  card_type_id     Int
  text             String?   @db.VarChar(100)
  text_css         String?   @db.VarChar(4000)
  bg_css           String?   @db.VarChar(4000)
  created_date     DateTime  @default(now())
  updated_date     DateTime  @default(now())
  card             card[]
  card_type        card_type @relation(fields: [card_type_id], references: [card_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_card_template_card_type")
}

model card_type {
  card_type_id  Int             @id(map: "pk_card_type") @default(autoincrement())
  name          String?         @db.VarChar(50)
  card_template card_template[]
}

model password {
  hash    String @db.VarChar(100)
  user_id Int    @unique(map: "uk_password_user_id")
  user    user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_password_user_id")
}

model user {
  user_id      Int       @id(map: "pk_user") @default(autoincrement())
  email        String    @unique(map: "uk_user_email") @db.VarChar(200)
  first_name   String?   @db.VarChar(50)
  last_name    String?   @db.VarChar(50)
  created_date DateTime  @default(now())
  updated_date DateTime  @default(now())
  deleted      String    @default("N") @db.VarChar(1)
  card         card[]
  password     password?
}

model message {
  message_id   Int      @id(map: "pk_message") @default(autoincrement())
  card_id      Int
  from         String   @db.VarChar(50)
  text         String   @db.VarChar(500)
  color        String   @db.VarChar(50)
  font         String   @db.VarChar(50)
  image_url    String?  @db.VarChar(500)
  deleted      String   @default("N") @db.VarChar(1)
  created_date DateTime @default(now())
  updated_date DateTime @default(now())
  card         card     @relation(fields: [card_id], references: [card_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_message_card")
}
